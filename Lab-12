#1. Write a program to create a class that represents Complex numbers containing real and imaginary parts and then use it to perform complex number addition, subtraction, multiplication and division.

class Complex:
    def __init__(self, real, imag):
        self.real = real
        self.imag = imag

    def add(self, other):
        return Complex(self.real + other.real, self.imag + other.imag)

    def subtract(self, other):
        return Complex(self.real - other.real, self.imag - other.imag)

    def multiply(self, other):
        real = self.real * other.real - self.imag * other.imag
        imag = self.real * other.imag + self.imag * other.real
        return Complex(real, imag)

    def divide(self, other):
        denom = other.real**2 + other.imag**2
        real = (self.real * other.real + self.imag * other.imag) / denom
        imag = (self.imag * other.real - self.real * other.imag) / denom
        return Complex(real, imag)

    def display(self):
        print(f"{self.real} + {self.imag}i")


c1 = Complex(4, 5)
c2 = Complex(2, 3)
c1.add(c2).display()
c1.subtract(c2).display()
c1.multiply(c2).display()
c1.divide(c2).display()

#2. Write a program that implements a Matrix class and performs addition, multiplication and transpose operations on 3x3 matrices.

class Matrix:
    def __init__(self, data):
        self.data = data

    def add(self, other):
        result = [[self.data[i][j] + other.data[i][j] for j in range(3)] for i in range(3)]
        return Matrix(result)

    def multiply(self, other):
        result = [[sum(self.data[i][k] * other.data[k][j] for k in range(3)) for j in range(3)] for i in range(3)]
        return Matrix(result)

    def transpose(self):
        result = [[self.data[j][i] for j in range(3)] for i in range(3)]
        return Matrix(result)

    def display(self):
        for row in self.data:
            print(row)


m1 = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
m2 = Matrix([[9, 8, 7], [6, 5, 4], [3, 2, 1]])

m1.add(m2).display()
m1.multiply(m2).display()
m1.transpose().display()

#3. Write a program to create a class that can calculate the surface area and volume of a solid. The class should also have a provision to accept the data relevant to the solid.

class Solid:
    def __init__(self, radius, height):
        self.radius = radius
        self.height = height

    def surface_area(self):
        return 2 * 3.14 * self.radius * (self.radius + self.height)

    def volume(self):
        return 3.14 * self.radius ** 2 * self.height


s = Solid(3, 5)
print("Surface Area:", s.surface_area())
print("Volume:", s.volume())

#4. Write a program to create a class that can calculate the perimeter/circumference and area of a regular shape. The class should also have a provision to accept the data relevant to the shape.

class Shape:
    def __init__(self, side):
        self.side = side

    def perimeter(self):
        return 4 * self.side

    def area(self):
        return self.side ** 2


square = Shape(4)
print("Perimeter:", square.perimeter())
print("Area:", square.area())

#5. Write a program that creates and uses a Time class to perform various time arithmetic operations.

class Time:
    def __init__(self, h, m, s):
        self.h = h
        self.m = m
        self.s = s

    def add(self, other):
        s = self.s + other.s
        m = self.m + other.m + s // 60
        h = self.h + other.h + m // 60
        return Time(h % 24, m % 60, s % 60)

    def display(self):
        print(f"{self.h:02}:{self.m:02}:{self.s:02}")


t1 = Time(2, 45, 50)
t2 = Time(1, 20, 30)
t3 = t1.add(t2)
t3.display()

#6. Write a program to create a class Date that has a list containing day, month and year attributes. Define an overloaded == operator to compare two Date objects.

class Date:
    def __init__(self, day, month, year):
        self.day = day
        self.month = month
        self.year = year

    def __eq__(self, other):
        return self.day == other.day and self.month == other.month and self.year == other.year


d1 = Date(17, 4, 2025)
d2 = Date(17, 4, 2025)
print("Dates are equal:" if d1 == d2 else "Dates are not equal.")

#7. Create a class Weather that has a list containing weather parameters. Define an overloaded in operator that checks whether an item is present in the list. (Hint: define the function __contains__( )in a class.)

class Weather:
    def __init__(self, parameters):
        self.parameters = parameters

    def __contains__(self, item):
        return item in self.parameters


w = Weather(["sunny", "cloudy", "rainy"])
print("rainy" in w)
print("snowy" in w)

#8. Implement a String class containing the following functions:
a. Overloaded += operator function to perform string concatenation
b. Method toLower() to convert upper case letters to lower case.
c. Method toUpper() to convert lower case letters to upper case.

class MyString:
    def __init__(self, value):
        self.value = value

    def __iadd__(self, other):
        self.value += other
        return self

    def toLower(self):
        return self.value.lower()

    def toUpper(self):
        return self.value.upper()


s = MyString("Hello")
s += " World"
print(s.value)
print(s.toLower())
print(s.toUpper())
