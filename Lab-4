#1 Print all alphabets in upper case and in lower case.

print("Upper case alphabets:")
for letter in range(65, 91): 
    print(chr(letter), end=" ")

print("\nLower case alphabets:")
for letter in range(97, 123): 
    print(chr(letter), end=" ")

#2 Print a multiplication table of a given number.

num = int(input("Enter a number to print its multiplication table: "))

print(f"\nMultiplication table of {num} is:")
for i in range(1, 11):
    print(f"{num} x {i} = {num * i}")

#3 Count no. of alphabets and no. of digits in any given string.

input_string = input("Enter a string: ")

alpha_count = 0
digit_count = 0

for char in input_string:
    if char.isalpha(): 
        alpha_count += 1
    elif char.isdigit():  
        digit_count += 1

print(f"Number of alphabets: {alpha_count}")
print(f"Number of digits: {digit_count}")

#4 Check whether a given number is prime, is perfect, is Armstrong, is palindrome, is automorphic.

def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
    return True

def is_perfect(num):
    sum_divisors = 0
    for i in range(1, num):
        if num % i == 0:
            sum_divisors += i
    return sum_divisors == num

def is_armstrong(num):
    num_str = str(num)
    num_digits = len(num_str)
    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)
    return sum_of_powers == num

def is_palindrome(num):
    return str(num) == str(num)[::-1]

def is_automorphic(num):
    square = num ** 2
    return str(square).endswith(str(num))

num = int(input("Enter a number: "))

print(f"Is {num} a prime number? {is_prime(num)}")
print(f"Is {num} a perfect number? {is_perfect(num)}")
print(f"Is {num} an Armstrong number? {is_armstrong(num)}")
print(f"Is {num} a palindrome number? {is_palindrome(num)}")
print(f"Is {num} an automorphic number? {is_automorphic(num)}")

#5 Generate all Pythagorean Triplets with side length <= 30.

for a in range(1, 31):
    for b in range(a, 31):
        for c in range(b, 31): 
            if a**2 + b**2 == c**2:
                print(f"({a}, {b}, {c})")

#6 Print 24 hours of day with suitable suffixes like AM, PM, Noon and Midnight.

for hour in range(24):
    if hour == 0:
        print(f"12:00 AM (Midnight)") 
    elif hour == 12:
        print(f"12:00 PM (Noon)") 
    elif hour < 12:
        print(f"{hour}:00 AM") 
    else:
        print(f"{hour - 12}:00 PM")

#7 Print nCr and nPr.

def factorial(num):
    result = 1
    for i in range(1, num + 1):
        result *= i
    return result

def nCr(n, r):
    return factorial(n) // (factorial(r) * factorial(n - r))

def nPr(n, r):
    return factorial(n) // factorial(n - r)

n = int(input("Enter n: "))
r = int(input("Enter r: "))

print(f"nCr (Combinations) of {n} and {r} is: {nCr(n, r)}")
print(f"nPr (Permutations) of {n} and {r} is: {nPr(n, r)}")

#8 Print factorial of a given number.

def factorial(num):
    result = 1
    for i in range(1, num + 1):
        result *= i 
    return result

num = int(input("Enter a number: "))

print(f"The factorial of {num} is: {factorial(num)}")

#9 Print N natural nos. in reverse.

def print_reverse_natural_numbers(n):
    for i in range(n, 0, -1):
        print(i, end=" ")

n = int(input("Enter a number N: "))

print_reverse_natural_numbers(n)

#10 Generate N numbers of Fibonacci series.

def fibonacci(n):
    a, b = 0, 1
    for _ in range(n):
        print(a, end=" ") 
        a, b = b, a + b  # Update 'a' to 'b' and 'b' to 'a + b'

n = int(input("Enter the number of Fibonacci numbers to generate: "))
fibonacci(n)

#11 Calculate sin(x); x is a radian value. The formula is as under:
sin𝑥=𝑥− 𝑥33!+ 𝑥55!− 𝑥77!…

import math

def sin_taylor(x, terms=10):
    sin_x = 0
    for n in range(terms):
        sign = (-1) ** n 
        numerator = x ** (2 * n + 1)
        denominator = math.factorial(2 * n + 1) 
        
        sin_x += sign * (numerator / denominator)
    
    return sin_x

x = float(input("Enter the value of x in radians: "))

result = sin_taylor(x)
print(f"The calculated sin({x}) is: {result}")

#12  Sum of n numbers 

n = int(input("Enter a number: "))
sum_n = 0

for i in range(1, n + 1):
    sum_n += i

print("Sum of first", n, "natural numbers is:",sum_n)
